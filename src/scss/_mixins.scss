@mixin phone {
  @media only screen and (min-width: map-get($breakpoints, 'phone') ) {
    @content;

  }
}
@mixin tablet {
  @media only screen and (min-width: map-get($breakpoints, 'tablet') ) {
    @content;

  }
}
@mixin desktop {
  @media only screen and (min-width: map-get($breakpoints, 'desktop') ) {
    @content;

  }
}

@mixin clearfix {
  *zoom:1;
  //this adds .clearfix:before
  &:before,
  &:after {
    content:' ';
    display:table;
  }
  &:after {
    clear: both;
  }
}

@mixin border-box {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

//pass three paramaters, and use : default if nothing
@mixin bg-mixin($image, $height: 100vh, $bgPosition: center center) {
  background: linear-gradient(to bottom, rgba(0,0,0,0), rgba(0,0,0,.6)), url($image);
  background-repeat: no-repeat;
  background-position: $bgPosition;
  background-size: cover;
  height: $height;
}

@mixin button($bg-color, $hover-color, $color) {
  @include border-radius(5px);
  background-color: $bg-color;
  display: block;
  color: $color;
  text-decoration: none;
  text-transform: $text-transform;
  font-size: $btn-font-size;
  transition: all .3s ease;
  font-weight: $btn-font-weight;
  padding: 10px 30px;
  margin-top:15px;
  @include tablet {
    display: inline-block;
  }
  &:hover {
    background-color: $hover-color;
  }


}

//from https://gist.github.com/charlieschwabacher/1096739
//Cross browser CSS3 mixins

@mixin box-shadow($left, $top, $radius, $color) {
	box-shadow: $left $top $radius $color;
	-webkit-box-shadow: $left $top $radius $color;
	-moz-box-shadow: $left $top $radius $color;
}

@mixin transition($property, $duration, $easing: linear) {
	transition: $property $duration $easing;
	-webkit-transition: $property $duration $easing;
	-moz-transition: $property $duration $easing;
}

@mixin border-radius($radius) {
	border-radius: $radius;
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
}

@mixin border-radii($topleft, $topright, $bottomright, $bottomleft) {
	border-top-left-radius: $topleft;
	border-top-right-radius: $topright;
	border-bottom-right-radius: $bottomright;
	border-bottom-left-radius: $bottomleft;
	-webkit-border-top-left-radius: $topleft;
	-webkit-border-top-right-radius: $topright;
	-webkit-border-bottom-right-radius: $bottomright;
	-webkit-border-bottom-left-radius: $bottomleft;
	-moz-border-radius-topleft: $topleft;
	-moz-border-radius-topright: $topright;
	-moz-border-radius-bottomright: $bottomright;
	-moz-border-radius-bottomleft: $bottomleft;
}

@mixin gradient($color1, $color2) {
	background-color: $color1;
	filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr=#{$color1}, endColorstr=#{$color2});
	background-image: -moz-linear-gradient(center top, $color1, $color2);
	background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($color1), to($color2));
}

@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) {
    text-shadow: $x $y $blur $color;
}

@mixin opacity($opacity: 0.5) {
    $opacityMultiplied: ($opacity * 100);

    filter:         alpha(opacity=$opacityMultiplied);
    -ms-filter:     "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $opacityMultiplied + ")";
    @include css3-prefix('opacity', $opacity);
}

@mixin grid-images($qty, $margin) {
  width: ((100% - (($qty - 1) * $margin)) / $qty);
  &:nth-child(n) {
    margin-right: $margin;
    margin-bottom: $margin;
  }
  &:nth-child(#{$qty}n + 1) {
    margin-right: 0;
    margin-bottom: 0;
  }
}
